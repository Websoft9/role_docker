- name: Create Docker user
  user:
    name: docker 
    shell: /user/sbin/nologin
    
# for different os family
- name: Install for {{ansible_os_family}} os family
  include: "{{ansible_os_family}}.yml"

### ln -sf /usr/local/bin/docker-compose  /usr/bin is need, otherwise CentOS on Azure and AWS error
- name: Install Docker Compose
  shell: |
    curl -L "https://github.com/docker/compose/releases/download/{{docker_compose_version}}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    ln -sf /usr/local/bin/docker-compose  /usr/bin

- name: Started and enable Docker
  service:
    name: docker 
    enabled: yes
    state: restarted

- name: Create an network for all application
  shell: docker network create {{docker_addnetwork}}
  failed_when: False
  
- name: Get Docker Gateway
  shell: ip route show | grep docker0 | awk '{print $9}'
  register: docker_gateway

- name: Check Docker Version
  shell: sudo sh -c "docker -v 1>> /data/logs/install_version.txt"

- name: Install Docker applications
  include: apps.yml docker_appname="{{docker_applications_item}}"
  loop: "{{docker_applications}}"
  loop_control:
    loop_var: docker_applications_item
  when: docker_applications is defined and docker_applications is not none and docker_applications != ""
  
- name: copy script files to remote
  copy: src=check_dockerapp_service.sh dest=/tmp/check_dockerapp_service.sh

- name: Check dockerapp service
  shell: bash /tmp/check_dockerapp_service.sh
  register: check_dockerapp_service
  notify: check_dockerapp_service
  
